package se.premex

import org.gradle.api.DefaultTask
import org.gradle.api.file.ConfigurableFileTree
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.tomlj.Toml
import org.tomlj.TomlArray
import org.tomlj.TomlParseResult
import java.io.File

open class GenerateOwnershipTask : DefaultTask() {

    @InputFiles
    val ownershipFiles: FileCollection =
        project
            .fileTree(
                project.projectDir
            ) { files: ConfigurableFileTree ->
                files.include("**/OWNERSHIP.toml")
                    .exclude("**/build/**")
                    .exclude("**/.github/**")
                    .exclude("**/.bitbucket/**")
            }

    @OutputFile
    val gitownershipFile = project.file("build/generated/ownershipValidation/gitownership")

    @OutputFile
    val bitbucketownershipFile = project.file("build/generated/ownershipValidation/bitbucketownership")

    @Nested
    lateinit var ownershipExtension: OwnershipExtension

    @TaskAction
    fun validationTask() {
        clearFiles()

        ownershipFiles.sorted().forEach { ownershipFile ->
            var path = ownershipFile.relativeTo(project.rootProject.rootDir).path.replace("OWNERSHIP.toml", "")
            appendComment(path + "OWNERSHIP.toml")
            if (path == "") {
                path = "*"
            }
            val result: TomlParseResult = Toml.parse(ownershipFile.readText())

            appendLine(path + "\t" + result.getString("owner.user"))

            val owners = result.getArrayOrEmpty("custom.owners")
            if (owners.size() > 0) {
                appendComment("Custom configurations")
            }
            for (i in 0 until owners.size()) {
                val get: TomlArray = owners.getArray(i)
                val key = get.getString(0)
                val value = get.getString(1)
                appendLine(key + "\t" + value)
            }
        }
        if (ownershipExtension.generateGithubOwners) {
            val target = File(project.rootProject.rootDir.path + "/.github/CODEOWNERS")
            if (target.exists()) {
                target.delete()
            }
            gitownershipFile.copyTo(target)
        }
        if (ownershipExtension.generateBitbucketOwners) {
            val target = File(project.rootProject.rootDir.path + "/.bitbucket/CODEOWNERS")
            if (target.exists()) {
                target.delete()
            }
            bitbucketownershipFile.copyTo(target)
        }
    }

    private fun clearFiles() {
        val message = "# This file is automatically generated by Premex ownership plugin\n" +
            "# Do not edit manually.\n" +
            "# https://plugins.gradle.org/plugin/se.premex.ownership\n" +
            "# https://github.com/premex-ab/ownership-gradle-plugin\n" +
            "\n"
        if (!gitownershipFile.exists()) {
            gitownershipFile.createNewFile()
            gitownershipFile.writeText(message)
        } else {
            gitownershipFile.writeText(message)
        }
        if (!bitbucketownershipFile.exists()) {
            bitbucketownershipFile.createNewFile()
            bitbucketownershipFile.writeText(message)
        } else {
            bitbucketownershipFile.writeText(message)
        }
    }

    private fun appendLine(txt: String) {
        gitownershipFile.appendText(txt + "\n")
        bitbucketownershipFile.appendText(txt + "\n")
    }

    private fun appendComment(txt: String) {
        appendLine("# $txt")
    }
}
